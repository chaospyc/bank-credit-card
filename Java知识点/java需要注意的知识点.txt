
1、equals 和 hashCode

引用类型使用Objects.equals()比较，基本类型使用==比较
public boolean equals(Object Obj)
/**
 * 获取对象的散列码，在散列表中才有用，在其他情况下没用
 * 如果对象相等，那么他们的hashCode() 值一定要相同；
 * 如果两个对象hashCode() 相同，他们并不一定相等；
 */
 public int hashCode() 

 正确使用Map必须保证
    1、作为Key的对象必须正确覆写equal()方法，相等的两个key实例调用equal() 必须返回true
    2、作为key的对象还必须正确覆写hashCode() 方法，且hashCode() 方法要严格遵守以下的规范

    如果两个对象相等，则两个对象的hsahCode() 必须相等
    如果两个对象不相等，则两个对象的hashCode()  尽量不要相等


频繁扩容对HashMap的性能影响很大。如果我们确定要使用一个容量为10000个key-value的HashMap，
更好的方式是创建HashMap时就指定容量：
    Map<String,Integer> map = new HashCode<>(10000);  

hashCode()方法编写得越好，HashMap工作的效率就越高。

EnumMap
    如果Map的key是enum类型，推荐使用EnumMap，既保证速度，也不浪费空间。
    使用EnumMap的时候，根据面向抽象编程的原则，应持有Map接口。

TreeMap 
    SortedMap在遍历时严格按照Key的顺序遍历，最常用的实现类是TreeMap；
    作为SortedMap的Key必须实现Comparable接口，或者传入Comparator；
        要严格按照compare()规范实现比较逻辑，否则，TreeMap将不能正常工作。

Properties
    读取配置文件时，一直无法读取到配置文件

HashSet & TreeSet
    放入HashSet的元素与作为HashMap的key要求相同；
    放入TreeSet的元素与作为TreeMap的Key要求相同；

Queue
    队列Queue实现了一个先进先出（FIFO）的数据结构：

    通过add()/offer()方法将元素添加到队尾；
    通过remove()/poll()从队首获取元素并删除；
    通过element()/peek()从队首获取元素但不删除。
    要避免把null添加到队列。

Deque
可见面向抽象编程的一个原则就是：尽量持有接口，而不是具体的实现类。

    Deque实现了一个双端队列（Double Ended Queue），它可以：
    将元素添加到队尾或队首：addLast()/offerLast()/addFirst()/offerFirst()；
    从队首／队尾获取元素并删除：removeFirst()/pollFirst()/removeLast()/pollLast()；
    从队首／队尾获取元素但不删除：getFirst()/peekFirst()/getLast()/peekLast()；
    总是调用xxxFirst()/xxxLast()以便与Queue的方法区分开；
    避免把null添加到队列。

Stack测试
    把数字转换为16进制 需要尝试一下

Iterator
    用Iterator遍历就没有上述问题，因为Iterator对象是集合对象自己在内部创建的，
    它自己知道如何高效遍历内部的数据集合，调用方则获得了统一的代码，编译器才能
    把标准的for each循环自动转换为Iterator遍历。

Colletions
    Collections提供了一系列方法来创建空集合：

    创建空List：List<T> emptyList()
    创建空Map：Map<K, V> emptyMap()
    创建空Set：Set<T> emptySet()
    线程安全集合
        Collections还提供了一组方法，可以把线程不安全的集合变为线程安全的集合：

        变为线程安全的List：List<T> synchronizedList(List<T> list)
        变为线程安全的Set：Set<T> synchronizedSet(Set<T> s)
        变为线程安全的Map：Map<K,V> synchronizedMap(Map<K,V> m)

IO
    Java标准库的java.io.InputStream定义了所有输入流的超类：
    FileInputStream实现了文件流输入；
    ByteArrayInputStream在内存中模拟一个字节流输入。
    总是使用try(resource)来保证InputStream正确关闭。

        public class ReadAsStringTest {
        public static void main(String[] args) throws IOException {
            byte[] data = { 72, 101, 108, 108, 111, 33 };
            try (InputStream input = new ByteArrayInputStream(data)){
                String s = readAsString(input);
                System.out.println(s);
            }
        }

        public static String readAsString(InputStream input) throws IOException {
            int n;
            StringBuilder sb = new StringBuilder();
            while ((n = input.read()) != -1){
                sb.append((char)n);
            }
            return sb.toString();
        }
    }

OutPutStream
    OutPutStream flush()方法能够强制把缓存区的数据输出；

    ByteArrayOutputStream output = new ByteArrayInputStream()

    public class FileInputStream extends InputStream
    FileInputStream 继承于 InputStream

Filter模式 （Decorator
    InputStream file = new FileInputStream("test.gz");
    InputStream buffered = new BufferedInputStream(file);
    InputStream gzip = new GZIPInputStream(buffered);
    将各种子类的功能交叉引用；
    可以把一个InputStream和任意个FilterInputStream组合；
    可以把一个OutputStream和任意个FilterOutputStream组合

    在叠加多个FileterInputStream，我们只需要持有最外层的InputStream，在最外层的InputStream关闭时，内层的InputStream
    的Close方法也会被自动调用，不会存在自动调用；


Reader 定义了所有字符输入流的超类
    FileReader 实现了文件字符流输入，输入时需要指定编码
    CharArrayReader 和 StringReader 可以在内存中模拟一个字符输入；
    使用try (resource)保证Reader正确关闭。

    try(Reader reader = new InputStreamReader(new FileInputStream("src\\IOTest\\Notebo.txt"))){
        System.out.println(reader.read());
    }
    InputStream input = new FileInputStream("src\\IOTest\\Notebo.txt");
    Reader reader = new InputStreamReader(input,StandardCharsets.UTF_8);
    System.out.println(reader.read());

Writer 定义了所有字符输出流的超类
    FileWriter实现了文件字符流输出；

    CharArrayWriter和StringWriter在内存中模拟一个字符流输出。

    public class WriteTest {
        public static void main(String[] args) throws IOException {
            try(CharArrayWriter writer = new CharArrayWriter()){
                writer.write(65);
                writer.write(66);
                char[] data = writer.toCharArray();
            }
        }
    }

Files and Paths
    Java 7开始，提供了Files和Paths这两个工具类
    PS: Files提供的读写方法，受内存限制，只能读写小文件，例如配置文件等，不可一次读入几个G的大文件。
        读写大型文件仍然要使用文件流，每次只读写一部分文件内容。

Java时间
    Java有两套日期和时间的API：

    旧的Date、Calendar和TimeZone；
    新的LocalDateTime、ZonedDateTime、ZoneId等。
    分别位于java.util和java.time包中。
    ava 8引入了新的日期和时间API，它们是不变类，默认按ISO 8601标准格式化和解析；

    使用LocalDateTime可以非常方便地对日期和时间进行加减，或者调整日期和时间，它总是返回新对象；
    使用isBefore()和isAfter()可以判断日期和时间的先后；
    使用Duration和Period可以表示两个日期和时间的“区间间隔”。
    读后有收获可以支付宝请作者喝咖啡，读后有疑问请加

    处理日期和时间时，尽量使用新的java.time包；
    在数据库中存储时间戳时，尽量使用long型时间戳，它具有省空间，效率高，不依赖数据库的优点。


Base64
    url Encode/ Decode: 主要用于解决URL中包含的非法字符，比如中文等
    base64: 简单的加密，把字符加密成二机制数据，无错传输
    md5：一般为不可逆的加密算法

3. Unicode

由于世界各地都产生了自己的编码方案，这是给人的沟通带来了巨大麻烦。于是有一个叫做ISO的国际组织开始着手解决这个问题，想用一种规范来表示出所有的语言。于是Unicode就这样产生了。Unicode是内存编码表示方案（是规范），而UTF是如何保存和传输Unicode的方案（是实现）这也是UTF与Unicode的区别。

3. UTF

UTF是 Unicode Transformation Format的缩写。是Unicode的一种实现方案。任何文字在Unicode中都对应一个值，这个值称为代码点也叫码位（CodePoint）。代码点的值通常写为：U+ABCD

4. HexString

将内存中的每个字节转换为两个十六进制的数，0001对应1，0011对应3以此类推，所以经过这样的转换一个字节的信息实际上要用两个字节来储存。

5. Base64编码

Base64 是网络上常见的用于传输8bit字节代码的编码方式之一，可以将二进制转为“字符串”。在应用程序中常常需要把二进制数据编码为适合放在URL中的形式，此时采用Base64编码具有不可读性，即所编码的数据不会被人用肉眼直接看到。

6. URL编码

ios中http请求遇到汉字的时候，需要转化成UTF-8，用到的方法是：数据请求是URL含有中文，需要转码为UTF8


HashCode 
    哈希碰撞是指，两个不同的输入得到了相同的输出：  


Java 多线程
    Java线程的状态有以下几种：

    New：新创建的线程，尚未执行；
    Runnable：运行中的线程，正在执行run()方法的Java代码；
    Blocked：运行中的线程，因为某些操作被阻塞而挂起；
    Waiting：运行中的线程，因为某些操作在等待中；
    Timed Waiting：运行中的线程，因为执行sleep()方法正在计时等待；
    Terminated：线程已终止，因为run()方法执行完毕。